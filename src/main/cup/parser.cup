package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;

class Parser;

action code {:
    SymbolTableGenerator gts = SymbolTableGenerator.getInstance();
    IntermediateCodeGenerator gci = IntermediateCodeGenerator.getInstance();

    int tope = 0;
    int pos = 0;
    List<String> varList = new ArrayList<String>();
    string tFactor, tExpresion, tTermino, tExpresionAux;
:};

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal GREATER_OR_EQUAL;
terminal LESS;
terminal LESS_OR_EQUAL;
terminal EQUAL;
terminal DISTINCT;

terminal AND;
terminal OR;
terminal NOT;

terminal CONTAR_PRIMOS;
terminal APLICAR_DESCUENTO;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;

terminal INIT;
terminal LEER;
terminal ESCRIBIR;

terminal MIENTRAS;
terminal SI;
terminal SINO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal expression2;
non terminal term;
non terminal factor;
non terminal funcion;
non terminal init_block;
non terminal leer;
non terminal escribir;
non terminal si;
non terminal mientras;
non terminal list_statement;
non terminal statement;
non terminal variable;
non terminal data_type;
non terminal sentencia_si;
non terminal condicion;
non terminal lista_comparacion;
non terminal comparacion;
non terminal comparar_logico;
non terminal contar_primos;
non terminal lista_parametros;
non terminal parametros;
non terminal lista_precios;
non terminal precio;
non terminal aplicar_descuento;
non terminal monto_desc;
non terminal indice;
non terminal sentence_list;

// Start Symbol Definition
start with program;

program ::= sentence_list;

sentence_list ::= sentence;
sentence_list ::= sentence_list sentence;

sentence ::= init_block;
sentence ::= assignment;
sentence ::= leer;
sentence ::= escribir;
sentence ::= si;
sentence ::= mientras;
sentence ::= aplicar_descuento;

assignment ::= IDENTIFIER:id ASSIG expression                                   {: System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":=");:};
assignment ::= IDENTIFIER:id ASSIG expression2                                  {: System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":="); :};

expression2 ::= STRING_CONSTANT:constant                                        {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String"); gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()) :};
expression2 ::= funcion;

expression ::= expression PLUS term                                             {:  gci.add("+");:};
expression ::= expression SUB term                                              {:  gci.add("-");:};
expression ::= term;                                                            {: tExpresion = tTermino; :};

term ::= factor;                                                                {: tTermino = tFactor; :};
term ::= term MULT factor                                                       {:  gci.add("*");:};
term ::= term DIV factor                                                        {:  gci.add("/");:};

factor ::= IDENTIFIER:id                                                        {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); tFactor= gts.getFactor(id.toString()) :};
factor ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int");
                                                                                    gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()):};
factor ::= FLOAT_CONSTANT:constant                                              {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float");
                                                                                    gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()):};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET                                {: System.out.println("Factor = (Expression)"); :};

funcion ::= contar_primos;

init_block ::= INIT OPEN_CURLY_BRACKET list_statement CLOSE_CURLY_BRACKET;
list_statement ::= statement;
list_statement ::= list_statement statement;

statement ::= variable COLON data_type                                          {: gci.add(":"); :};
variable ::= IDENTIFIER:id                                                      {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); :};
variable ::= variable COMMA IDENTIFIER:id                                       {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add(":"); :};

data_type ::= FLOAT                                                             {: gts.addTokenInit("Float");  gci.add("Float"); :};
data_type ::= INT                                                               {: gts.addTokenInit("Int");    gci.add("Int"); :};
data_type ::= STRING                                                            {: gts.addTokenInit("String"); gci.add("String"); :};

leer ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                          {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("leer"); :};

escribir ::= ESCRIBIR OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                  {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("escribir"); :};
escribir ::= ESCRIBIR OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET       {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String"); gci.add(constant.toString()); gci.add("escribir"); :};

si ::= SI OPEN_BRACKET condicion CLOSE_BRACKET sentencia_si {: tope = gci.desapilar(); gci.update(tope,1); :};
si ::= SI OPEN_BRACKET condicion CLOSE_BRACKET sentencia_si SINO  {:gci.add("BI"); tope = gci.desapilar(); gci.update(tope,1); gci.apilar(); gci.next();:} OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET  {: tope = gci.desapilar(); gci.update(tope,0); :};

sentencia_si ::= OPEN_CURLY_BRACKET  {: gci.apilar(); gci.next(); :} program CLOSE_CURLY_BRACKET ;

condicion ::= NOT lista_comparacion                                             {: gci.add("NOT");:};
condicion ::= lista_comparacion;

lista_comparacion ::= lista_comparacion comparar_logico comparacion;
lista_comparacion ::= comparacion;

comparacion ::= expression {: tExpresionAux= tExpresion; :} GREATER expression                                   {: gci.add("CMP"); gci.add("BLE"); :};
comparacion ::= expression {: tExpresionAux= tExpresion; :} GREATER_OR_EQUAL expression                          {: gci.add("CMP"); gci.add("BLT");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} LESS expression                                      {: gci.add("CMP"); gci.add("BGE");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} LESS_OR_EQUAL expression                             {: gci.add("CMP"); gci.add("BGT");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} EQUAL expression                                     {: gci.add("CMP"); gci.add("BNE");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} DISTINCT expression                                  {: gci.add("CMP"); gci.add("BEQ");:};

comparar_logico ::= AND                                                                                          {: gci.add("AND");:};
comparar_logico ::= OR                                                                                           {: gci.add("OR");:};

mientras ::= MIENTRAS OPEN_BRACKET {: gci.apilar(); gci.add("Etiqueta"); :} condicion CLOSE_BRACKET
             OPEN_CURLY_BRACKET {: gci.apilar(); gci.next(); :} program CLOSE_CURLY_BRACKET {: gci.add("BI"); tope = gci.desapilar(); gci.update(tope,1); tope = gci.desapilar(); gci.goTo(tope); :};

contar_primos ::= CONTAR_PRIMOS OPEN_BRACKET OPEN_SQUARE_BRACKET                {: gci.add("["); :}
                  lista_parametros CLOSE_SQUARE_BRACKET CLOSE_BRACKET           {: gci.add("ContarPrimos"); :};

lista_parametros ::= expression;
lista_parametros ::= expression COMMA lista_parametros;

aplicar_descuento ::= APLICAR_DESCUENTO OPEN_BRACKET parametros CLOSE_BRACKET   {: gci.add("aplicarDescuento"); :};

parametros ::= monto_desc COMMA OPEN_SQUARE_BRACKET lista_precios CLOSE_SQUARE_BRACKET COMMA indice;

monto_desc ::= FLOAT_CONSTANT:constant                                          {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float"); gci.add(constant.toString());:};
monto_desc ::= INTEGER_CONSTANT:constant                                        {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString()); :};

indice ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString());:};

lista_precios ::= precio;
lista_precios ::= precio COMMA lista_precios;

precio ::= FLOAT_CONSTANT:constant                                              {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float"); gci.add(constant.toString()); :};
precio ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString()); :};