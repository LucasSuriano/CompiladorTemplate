package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;

class Parser;

action code {:
    SymbolTableGenerator gts = SymbolTableGenerator.getInstance();
    IntermediateCodeGenerator gci = IntermediateCodeGenerator.getInstance();
:};

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal GREATER_OR_EQUAL;
terminal LESS;
terminal LESS_OR_EQUAL;
terminal EQUAL;
terminal DISTINCT;

terminal AND;
terminal OR;
terminal NOT;

terminal CONTAR_PRIMOS;
terminal APLICAR_DESCUENTO;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;

terminal INIT;
terminal LEER;
terminal ESCRIBIR;

terminal MIENTRAS;
terminal SI;
terminal SINO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal expression2;
non terminal term;
non terminal factor;
non terminal funcion;
non terminal init_block;
non terminal leer;
non terminal escribir;
non terminal si;
non terminal mientras;
non terminal list_statement;
non terminal statement;
non terminal variable;
non terminal data_type;
non terminal sentencia_si;
non terminal condicion;
non terminal lista_comparacion;
non terminal comparacion;
non terminal comparar_matematico;
non terminal comparar_logico;
non terminal contar_primos;
non terminal lista_parametros;
non terminal parametros;
non terminal lista_precios;
non terminal precio;
non terminal aplicar_descuento;
non terminal monto_desc;
non terminal indice;

// Start Symbol Definition
start with program;

program ::= sentence;
program ::= program sentence;
sentence ::= init_block;
sentence ::= assignment;
sentence ::= leer;
sentence ::= escribir;
sentence ::= si;
sentence ::= mientras;
sentence ::= aplicar_descuento;

assignment ::= IDENTIFIER:id ASSIG expression                                   {: System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":=");:};
assignment ::= IDENTIFIER:id ASSIG expression2                                  {: System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":="); :};
expression2 ::= STRING_CONSTANT:constant                                        {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String"); gci.add(constant.toString()); :};
expression2 ::= funcion;
expression ::= expression PLUS term;                                            {:  gci.add("+");:};
expression ::= expression SUB term;                                             {:  gci.add("-");:};
expression ::= term                                                             {: System.out.println("Expression = Term");:};
term ::= term MULT factor;                                                      {:  gci.add("*");:};
term ::= term DIV factor;                                                       {:  gci.add("/");:};
term ::= factor                                                                 {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id                                                        {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString());:};
factor ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int");
                                                                                    gci.add(constant.toString());:};
factor ::= FLOAT_CONSTANT:constant                                              {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float");
                                                                                    gci.add(constant.toString());:};


factor ::= OPEN_BRACKET expression CLOSE_BRACKET                                {: System.out.println("Factor = (Expression)"); :};
funcion ::= contar_primos;                                                      

init_block ::= INIT OPEN_CURLY_BRACKET list_statement CLOSE_CURLY_BRACKET;
list_statement ::= list_statement statement;
list_statement ::= statement;
statement ::= variable COLON data_type;                                         {: gci.add(":"); :};
variable ::= variable COMMA IDENTIFIER:id                                       {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString());  {: gci.add(":"); :}; :};
variable ::= IDENTIFIER:id                                                      {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); :};

data_type ::= FLOAT                                                             {: gts.addTokenInit("Float");  gci.add("Float"); :};
data_type ::= INT                                                               {: gts.addTokenInit("Int");    gci.add("Int"); :};
data_type ::= STRING                                                            {: gts.addTokenInit("String"); gci.add("String"); :};

leer ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                          {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("leer"); :};
escribir ::= ESCRIBIR OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                  {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("escribir"); :};
escribir ::= ESCRIBIR OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET       {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String"); gci.add(constant.toString()); gci.add("escribir"); :};

si ::= SI OPEN_BRACKET condicion                                                {: gci.apilar(pos); gci.next(); :}; 
    CLOSE_BRACKET sentencia_si;                                                 {: tope = gci.desapilar(); gci.update(tope, pos+1); :};;
si ::= SI OPEN_BRACKET condicion                                                {: gci.apilar(pos); gci.next(); :};
    CLOSE_BRACKET sentencia_si                                                  {: gci.add("BI"); tope = gci.desapilar(); gci.update(tope, pos+1); gci.apilar(pos); gci.next(); :}; 
    SINO sentencia_si                                                           {: tope = gci.desapilar(); update(tope, pos+1); :};;
sentencia_si ::= OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET;
condicion ::= NOT lista_comparacion;                                            {: gci.add("NOT");:};
condicion ::= lista_comparacion;
lista_comparacion ::= lista_comparacion comparar_logico comparacion;
lista_comparacion ::= comparacion;
comparacion ::= factor GREATER factor;                                          {: gci.add("BLE");:};
comparacion ::= factor GREATER_OR_EQUAL factor;                                 {: gci.add("BLT");:};
comparacion ::= factor LESS factor;                                             {: gci.add("BGE");:};
comparacion ::= factor LESS_OR_EQUAL factor;                                    {: gci.add("BGT");:};
comparacion ::= factor EQUAL factor;                                            {: gci.add("BNE");:};
comparacion ::= factor DISTINCT factor;                                         {: gci.add("BEQ");:};

comparar_logico ::= AND;                                                        {: gci.add("AND");:};
comparar_logico ::= OR;                                                         {: gci.add("OR");:};


mientras ::= MIENTRAS                                                           {: gci.apilar(pos); gci.add("Etiqueta"); :}; 
    OPEN_BRACKET condicion                                                      {: gci.apilar(pos); gci.next(); :}; 
    CLOSE_BRACKET OPEN_CURLY_BRACKET program                                    {: gci.add("BI"); tope = gci.desapilar(); gci.update(tope, pos+1); tope = gci.desapilar(); gci.update(tope, pos); :};  
    CLOSE_CURLY_BRACKET;

contar_primos ::= CONTAR_PRIMOS OPEN_BRACKET OPEN_SQUARE_BRACKET                {: gci.add("["); :};  
    lista_parametros                                                            {: gci.add("]"); :}; 
        CLOSE_SQUARE_BRACKET CLOSE_BRACKET;                                     {: gci.add("ContarPrimos"); :}; 
lista_parametros ::= lista_parametros COMMA expression;                         
lista_parametros ::= expression;

//aplicarDescuento(27.5, [500, 305, 79.4, 10], 3)

aplicar_descuento ::= APLICAR_DESCUENTO OPEN_BRACKET parametros CLOSE_BRACKET;   {: gci.add("aplicarDescuento"); :};
parametros ::=  monto_desc COMMA  OPEN_SQUARE_BRACKET                            {: gci.add("["); :};  
     lista_precios                                                               {: gci.add("["); :};  
    CLOSE_SQUARE_BRACKET COMMA indice; 
monto_desc ::= FLOAT_CONSTANT:constant                                           {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float"); gci.add(constant.toString());:};
monto_desc ::= INTEGER_CONSTANT:constant                                         {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString()); :};
indice ::= INTEGER_CONSTANT:constant                                             {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString());:};
lista_precios ::= lista_precios COMMA precio;                                    
lista_precios ::= precio;
precio ::= FLOAT_CONSTANT:constant                                               {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float"); gci.add(constant.toString()); :};
precio ::= INTEGER_CONSTANT:constant                                             {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString()); :};