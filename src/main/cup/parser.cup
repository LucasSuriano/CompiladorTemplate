package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

class Parser;

action code {:
    SymbolTableGenerator gts = SymbolTableGenerator.getInstance();
    IntermediateCodeGenerator gci = IntermediateCodeGenerator.getInstance();

    int tope = 0;
    String precio = null;
    String montoDesc = null;
    String tFactor, tExpresion, tTermino, tExpresionAux;
    List<String> listaVar = new ArrayList<String>();
:};

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal GREATER_OR_EQUAL;
terminal LESS;
terminal LESS_OR_EQUAL;
terminal EQUAL;
terminal DISTINCT;

terminal AND;
terminal OR;
terminal NOT;

terminal CONTAR_PRIMOS;
terminal APLICAR_DESCUENTO;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;

terminal INIT;
terminal LEER;
terminal ESCRIBIR;

terminal MIENTRAS;
terminal SI;
terminal SINO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal funcion;
non terminal init_block;
non terminal leer;
non terminal escribir;
non terminal si;
non terminal mientras;
non terminal list_statement;
non terminal statement;
non terminal variable;
non terminal data_type;
non terminal sentencia_si;
non terminal condicion;
non terminal lista_comparacion;
non terminal comparacion;
non terminal comparar_logico;
non terminal contar_primos;
non terminal lista_parametros;
non terminal parametros;
non terminal lista_precios;
non terminal precio;
non terminal aplicar_descuento;
non terminal monto_desc;
non terminal indice;
non terminal sentence_list;

// Start Symbol Definition
start with program;

program ::= sentence_list;

sentence_list ::= sentence;
sentence_list ::= sentence_list sentence;

sentence ::= init_block;
sentence ::= assignment;
sentence ::= leer;
sentence ::= escribir;
sentence ::= si;
sentence ::= mientras;
sentence ::= aplicar_descuento;

assignment ::= IDENTIFIER:id ASSIG expression                                   {: gci.analizar(gts.getSymbol(id.toString()).getType(),tExpresion);
                                                                                    System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":=");:};
assignment ::= IDENTIFIER:id ASSIG funcion                                      {: System.out.println("Assignment"); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); gci.add(":="); :};

expression ::= expression PLUS term                                             {: gci.analizar(tExpresion,tTermino); gci.add("+");:};
expression ::= expression SUB term                                              {: gci.analizar(tExpresion,tTermino); gci.add("-");:};
expression ::= term                                                             {: tExpresion = tTermino; :};

term ::= factor                                                                 {: tTermino = tFactor; :};
term ::= term MULT factor                                                       {: gci.analizar(tTermino,tFactor); gci.add("*");:};
term ::= term DIV factor                                                        {: gci.analizar(tTermino,tFactor); gci.add("/");:};

factor ::= IDENTIFIER:id                                                        {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+"");
                                                                                    gci.add(id.toString()); tFactor= gts.getFactor(id.toString()); :};
factor ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int");
                                                                                    gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()); :};
factor ::= FLOAT_CONSTANT:constant                                              {: System.out.println("CONSTANT FLOAT: " + constant ); gts.addTokenCteAssignment(constant+"", "Float");
                                                                                    gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()); :};
factor ::= STRING_CONSTANT:constant                                              {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String");
                                                                                    gci.add(constant.toString()); tFactor= gts.getFactor(constant.toString()); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET                                {: System.out.println("Factor = (Expression)"); :};

funcion ::= contar_primos;

init_block ::= INIT OPEN_CURLY_BRACKET list_statement CLOSE_CURLY_BRACKET;
list_statement ::= statement;
list_statement ::= list_statement statement;

statement ::= variable COLON data_type;
variable ::= IDENTIFIER:id                                                      {: this.listaVar.add(id.toString()); System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); :};
variable ::= variable COMMA IDENTIFIER:id                                       {: this.listaVar.add(id.toString()); System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); :};

data_type ::= FLOAT                                                             {: gts.addTokenInit(this.listaVar,"Float"); :};
data_type ::= INT                                                               {: gts.addTokenInit(this.listaVar,"Int"); :};
data_type ::= STRING                                                            {: gts.addTokenInit(this.listaVar,"String"); :};

leer ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                          {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("leer"); :};

escribir ::= ESCRIBIR OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                  {: System.out.println("Id: " + id); gts.addTokenIdAssignment(id+""); gci.add(id.toString()); gci.add("escribir"); :};
escribir ::= ESCRIBIR OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET       {: System.out.println("CONSTANT STRING: " + constant ); gts.addTokenCteAssignment(constant+"", "String"); gci.add(constant.toString()); gci.add("escribir"); :};

si ::= SI OPEN_BRACKET condicion CLOSE_BRACKET sentencia_si {: tope = gci.desapilar(); gci.update(tope,1); :};
si ::= SI OPEN_BRACKET condicion CLOSE_BRACKET sentencia_si SINO  {:gci.add("BI"); tope = gci.desapilar(); gci.update(tope,1); gci.apilar(); gci.next();:} OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET  {: tope = gci.desapilar(); gci.update(tope,0); :};

sentencia_si ::= OPEN_CURLY_BRACKET  {: gci.apilar(); gci.next(); :} program CLOSE_CURLY_BRACKET ;

condicion ::= NOT lista_comparacion                                             {: gci.add("NOT");:};
condicion ::= lista_comparacion;

lista_comparacion ::= lista_comparacion comparar_logico comparacion;
lista_comparacion ::= comparacion;

comparacion ::= expression {: tExpresionAux= tExpresion; :} GREATER expression                                   {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BLE"); :};
comparacion ::= expression {: tExpresionAux= tExpresion; :} GREATER_OR_EQUAL expression                          {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BLT");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} LESS expression                                      {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BGE");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} LESS_OR_EQUAL expression                             {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BGT");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} EQUAL expression                                     {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BNE");:};
comparacion ::= expression {: tExpresionAux= tExpresion; :} DISTINCT expression                                  {: gci.analizar(tExpresionAux,tExpresion); gci.add("CMP"); gci.add("BEQ");:};

comparar_logico ::= AND                                                                                          {: gci.add("AND");:};
comparar_logico ::= OR                                                                                           {: gci.add("OR");:};

mientras ::= MIENTRAS OPEN_BRACKET {: gci.apilar(); gci.add("ET"); :} condicion CLOSE_BRACKET
             OPEN_CURLY_BRACKET {: gci.apilar(); gci.next(); :} program CLOSE_CURLY_BRACKET {: gci.add("BI"); tope = gci.desapilar(); gci.update(tope,1); tope = gci.desapilar(); gci.goTo(tope); :};

contar_primos ::= CONTAR_PRIMOS OPEN_BRACKET OPEN_SQUARE_BRACKET
                  lista_parametros CLOSE_SQUARE_BRACKET CLOSE_BRACKET           {: gci.add("@cont"); gci.add("0"); gci.add("CMP"); gci.add("BNE"); gci.apilar(); gci.next();
                                                                                                       gci.add("@contPrimos"); gci.add("1"); gci.add("+"); gci.add("@contPrimos"); gci.add(":=");
                                                                                                       tope = gci.desapilar(); gci.update(tope,1);:};

lista_parametros ::= lista_parametros COMMA {: gci.add("@aux"); :} expression {: gci.add(":="); gci.apilar(); gci.add("ET-CP");
                    gci.add("@aux"); gci.add("1"); gci.add("CMP"); gci.add("BEQ"); gci.apilar(); gci.next();
                    gci.add("@aux"); gci.add("2"); gci.add("/"); gci.add("@aux"); gci.add("%"); gci.add("@resto"); gci.add(":=");
                    gci.add("@resto"); gci.add("0"); gci.add("CMP"); gci.add("BNE"); gci.apilar(); gci.next();
                    gci.add("@cont"); gci.add("1"); gci.add("+"); gci.add("@cont"); gci.add(":=");
                    tope = gci.desapilar(); gci.update(tope,1); gci.add("@aux"); gci.add("1"); gci.add("-"); gci.add("@aux"); gci.add(":=");
                    tope = gci.desapilar(); gci.update(tope,1); gci.add("BI"); tope = gci.desapilar(); gci.goTo(tope);
                     :};
lista_parametros ::= {: gci.add("@aux"); :}
                    expression {: gci.add(":="); gci.add("@cont"); gci.add("0"); gci.add(":=");
                    gci.add("@contPrimos"); gci.add("0"); gci.add(":="); gci.add("@resto"); gci.add("0"); gci.add(":="); gci.apilar(); gci.add("ET-CP");
                    gci.add("@aux"); gci.add("1"); gci.add("CMP"); gci.add("BEQ"); gci.apilar(); gci.next();
                    gci.add("@aux"); gci.add("2"); gci.add("/"); gci.add("@aux"); gci.add("%"); gci.add("@resto"); gci.add(":=");
                    gci.add("@resto"); gci.add("0"); gci.add("CMP"); gci.add("BNE"); gci.apilar(); gci.next();
                    gci.add("@cont"); gci.add("1"); gci.add("+"); gci.add("@cont"); gci.add(":=");
                    tope = gci.desapilar(); gci.update(tope,1); gci.add("@aux"); gci.add("1"); gci.add("-"); gci.add("@aux"); gci.add(":=");
                    tope = gci.desapilar(); gci.update(tope,1); gci.add("BI"); tope = gci.desapilar(); gci.goTo(tope);
                     :};


//acomodar iguales


aplicar_descuento ::= APLICAR_DESCUENTO OPEN_BRACKET parametros CLOSE_BRACKET;
parametros ::= monto_desc COMMA OPEN_SQUARE_BRACKET lista_precios CLOSE_SQUARE_BRACKET COMMA indice;
monto_desc ::= FLOAT_CONSTANT:constant                                          {: this.montoDesc = constant.toString();  gts.addTokenCteAssignment(constant+"", "Float"); :};
monto_desc ::= INTEGER_CONSTANT:constant                                        {: this.montoDesc = constant.toString();  gts.addTokenCteAssignment(constant+"", "Int"); :};
indice ::= INTEGER_CONSTANT:constant                                            {: tope = gci.desapilar(); gci.updateIndice(tope,constant.toString()); gts.addTokenCteAssignment(constant+"", "Int"); :};

lista_precios ::= lista_precios COMMA precio                                    {:
                                                                                   gci.add("@pos"); gci.add("@indice"); gci.add("CMP"); gci.add("BGT"); gci.apilar(); gci.next();
                                                                                   gci.add(this.precio.toString()); gci.add(this.montoDesc.toString()); gci.add("-"); gci.add("@aux"); gci.add("=");
                                                                                   tope = gci.desapilar(); gci.update(tope, 1); gci.apilar(); gci.next();
                                                                                   gci.add(this.precio.toString()); gci.add(this.montoDesc.toString()); gci.add("100"); gci.add("/"); gci.add("*"); gci.add("@aux"); gci.add("=");
                                                                                   tope = gci.desapilar(); gci.update(tope, 1); gci.add("@pos"); gci.add("@pos"); gci.add("1"); gci.add("+"); gci.add("="); :};

lista_precios ::= precio                                                        {: gci.add("@indice"); gci.apilar(); gci.next(); gci.add(":=");
                                                                                    gci.add("@pos"); gci.add("0"); gci.add(":="); gci.add("@aux"); gci.add("0"); gci.add("=");
                                                                                   gci.add("@pos"); gci.add("@indice"); gci.add("CMP"); gci.add("BGT"); gci.apilar(); gci.next();
                                                                                   gci.add(this.precio.toString()); gci.add(this.montoDesc.toString()); gci.add("-"); gci.add("@aux"); gci.add("=");
                                                                                   tope = gci.desapilar(); gci.update(tope, 1); gci.apilar(); gci.next();
                                                                                   gci.add(this.precio.toString()); gci.add(this.montoDesc.toString()); gci.add("100"); gci.add("/"); gci.add("*"); gci.add("@aux"); gci.add("=");
                                                                                   tope = gci.desapilar(); gci.update(tope, 1); gci.add("@pos"); gci.add("@pos"); gci.add("1"); gci.add("+"); gci.add("="); :};

precio ::= FLOAT_CONSTANT:constant                                              {: gts.addTokenCteAssignment(constant+"", "Float"); System.out.println("PRECIO: " + constant ); this.precio = constant.toString(); :};
precio ::= INTEGER_CONSTANT:constant                                            {: gts.addTokenCteAssignment(constant+"", "Int"); System.out.println("PRECIO: " + constant ); this.precio = constant.toString(); System.out.println("CONSTANT INT: " + constant ); gts.addTokenCteAssignment(constant+"", "Int"); gci.add(constant.toString()); :};